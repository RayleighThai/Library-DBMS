package MainForm;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Rayleigh Thai
 */
public class breturn extends javax.swing.JFrame {
    int e_id = 2;
    // find Employee Library location
    int ll = ell();
    
    public breturn() {
        initComponents();
    }
    public void fclose(){
        WindowEvent closeWindow = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backbutton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        blist = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        rlist = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        bsele = new javax.swing.JButton();
        bcanc = new javax.swing.JButton();
        creturn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        clist = new javax.swing.JList<>();
        refresh = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cdate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rdate = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        backbutton.setText("Back");
        backbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbuttonActionPerformed(evt);
            }
        });

        blist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                blistValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(blist);

        jScrollPane2.setViewportView(rlist);

        jLabel1.setText("Search by Customer");

        bsele.setText("Select");
        bsele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bseleActionPerformed(evt);
            }
        });

        bcanc.setText("Remove Selection");
        bcanc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcancActionPerformed(evt);
            }
        });

        creturn.setText("Confirm Return");
        creturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creturnActionPerformed(evt);
            }
        });

        clist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                clistValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(clist);

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        jLabel2.setText("Search by Book");

        cdate.setEditable(false);

        jLabel3.setText("Checkout Date");

        jLabel4.setText("Return Date");

        rdate.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backbutton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bcanc)
                        .addGap(65, 65, 65)
                        .addComponent(creturn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cdate, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rdate, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bsele, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(refresh))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refresh)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bsele)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(cdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(rdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backbutton)
                    .addComponent(creturn)
                    .addComponent(bcanc))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void bcancActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcancActionPerformed
        int index = rlist.getSelectedIndex();
        System.out.println("Index Selected: " + index);
        DefaultListModel rm = (DefaultListModel) rlist.getModel();
        if (index >= 0) {
            rm.removeElementAt(index);
            rlist.setModel(rm);
            JOptionPane.showMessageDialog(this, "Selection was removed!");
        }
        else {
            JOptionPane.showMessageDialog(this, "No Selection was selected!");
        }
    }//GEN-LAST:event_bcancActionPerformed
    
    public void bookadd(String strr) {
        bre.addElement(strr);
        rlist.setModel(bre);
    }
    
    public static String tostm(String id, String n) {
        String s = "";
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String bquery = "Select * from customer as c join checkout as cc on c.c_id = cc.c_id left join book as b on b.b_id = cc.b_id where cc.b_id = \"" + id + "\" and b.b_name = \"" + n+ "\" order by b.b_name;";
            System.out.println(bquery);
            Statement sta = connection.createStatement();
            ResultSet bs = sta.executeQuery(bquery);
            while (bs.next()) {
                s = bs.getString("c_name") + " returning " + bs.getString("b_id") + " - " + bs.getString("b_name");
            }
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
      return s;
    }
    DefaultListModel bre = new DefaultListModel();
    
    private void bseleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bseleActionPerformed
        //int index = blist.getSelectedIndex();
        String s = (String) blist.getSelectedValue();
        String[] str = s.split(" - ");
        String isbn = str[0].trim();
        String name = str[1].trim(); 
        String stm = tostm(isbn, name);
        for (int i = 1; i <= bre.getSize(); i++) {
            if (stm.equals(bre.getElementAt(i-1).toString())) {
                bre.removeElementAt(i-1);
                System.out.println("Not Removing");
                JOptionPane.showMessageDialog(this, "This Book already in the List!");
            }
        }
        bookadd(stm);        
    }//GEN-LAST:event_bseleActionPerformed

    private void backbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbuttonActionPerformed
        fclose();
        guiemployee back = new guiemployee();
        back.setVisible(true);
    }//GEN-LAST:event_backbuttonActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        refresh();
    }//GEN-LAST:event_refreshActionPerformed

    public void getbook(String id) {
        // connect to server, get books with associated id. 
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String bquery = "Select * from checkout as cc left join book as b on b.b_id = cc.b_id where c_id = " + id + " order by b.b_name;";
            System.out.println(bquery);
            Statement sta = connection.createStatement();
            ResultSet bs = sta.executeQuery(bquery);
            //Update book list
            DefaultListModel book = new DefaultListModel();
            while (bs.next()) {
                book.addElement(bs.getString("b_id") + " - " + bs.getString("b_name"));
            }
            blist.setModel(book);
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    
    private void clistValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_clistValueChanged
        // when a customer selected, book list will fiter to only said customer.
        int index = clist.getSelectedIndex();
        System.out.println("Index Selected: " + index);
        if (index >= 0) {
            String s = (String) clist.getSelectedValue();
            String[] str = s.split(" - ");
            String id = str[0].trim();
            getbook(id);
        }
    }//GEN-LAST:event_clistValueChanged

    public void getcustomer(String id) {
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String cquery = "select * from checkout as cc left join customer as c on c.c_id = cc.c_id where b_id = \"" + id + "\" order by c.c_id;";
            Statement sta = connection.createStatement();
            ResultSet rs = sta.executeQuery(cquery); 
            DefaultListModel customer = new DefaultListModel();
            
            while (rs.next()) {
                customer.addElement(rs.getString("c_id") + " - " + rs.getString("c_name"));
                cdate.setText(rs.getString("checkout_date"));
                rdate.setText(rs.getString("return_date"));
            }
            clist.setModel(customer);
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    
    private void blistValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_blistValueChanged
        // when a book selected ? can we do multiple
        int index = blist.getSelectedIndex();
        System.out.println("Index Selected: " + index);
        if (index >= 0) {
            String s = (String) blist.getSelectedValue();
            String[] str = s.split(" - ");
            String id = str[0].trim();
            getcustomer(id);
        }
    }//GEN-LAST:event_blistValueChanged

    int getid(String name){
        int id = 0;
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String cquery = "select * from checkout as cc left join customer as c on c.c_id = cc.c_id where c_name = \"" + name + "\"";
            Statement sta = connection.createStatement();
            ResultSet rs = sta.executeQuery(cquery); 
            while (rs.next()) {
                id = Integer.parseInt(rs.getString("c_id"));
            }            
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return id;
    }
    
    void bookreturn (String s) {
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            Statement sta = connection.createStatement();
            sta.executeUpdate(s); 
            JOptionPane.showMessageDialog(this, "Book(s) returned to library");
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    
    int ell(){
        int ll = 0;
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String cquery = "select * from employee where e_id = " + e_id;
            Statement sta = connection.createStatement();
            ResultSet rs = sta.executeQuery(cquery); 
            while (rs.next()) {
                ll = Integer.parseInt(rs.getString("l_id"));
            }
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return ll;
    }
    
    void updateStatus(String isbn){
        // Update book in book status from avail to yes and update location library
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String cquery = "Update `book_status` Set "
                    + "b_availability = 1, l_id = " + ll  
                    + " where b_id = \"" + isbn + "\"";
            Statement sta = connection.createStatement();
            sta.executeUpdate(cquery); 
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    
    void libraryreturn(String s) {
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String query = "select * from checkout where " + s;
            System.out.println(query);
            Statement sta = connection.createStatement();
            ResultSet rs = sta.executeQuery(query); 
            String bid = "", bn = "";
            while (rs.next()){
                bid = rs.getString("b_id");
                bn = rs.getString("b_name");
                System.out.println(bid + " named " + bn);
                updateStatus(bid);
            }
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    
    private void creturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creturnActionPerformed
        DefaultListModel returning = (DefaultListModel) rlist.getModel();
        String stm = "Delete from `checkout` where ";
        String line = "";
        int i = returning.getSize();
        while (i> 0) {
            String index = returning.getElementAt(i-1).toString();
            String[] s = index.split(" returning ");
            String name = s[0].trim();
            String[] ss = s[1].split(" - ");
            String isbn = ss[0].trim();
            int id = getid(name);
            returning.removeElementAt(i-1);
            line = line + ("c_id = \"" + id + "\" and b_id = \"" + isbn + "\" ");
            if (i > 1){
                line = line + " OR ";
            }
            i--;
        }
        stm = stm + line;
        System.out.println(stm);
        libraryreturn(line);
        bookreturn(stm);
        rlist.setModel(returning);
    }//GEN-LAST:event_creturnActionPerformed

    public void refresh(){
      try {
            crefresh();
            brefresh();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    public void brefresh()
    {
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String bquery = "Select * from checkout as cc left join book as b on b.b_id = cc.b_id order by b.b_name;";
            Statement sta = connection.createStatement();
            ResultSet bs = sta.executeQuery(bquery);
            DefaultListModel book = new DefaultListModel();
            while (bs.next()) {
                book.addElement(bs.getString("b_id") + " - " + bs.getString("b_name"));
            }
            blist.setModel(book);
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    public void crefresh() {
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String cquery = "select distinct cc.c_id, c_name from checkout as cc left join customer as c on c.c_id = cc.c_id  order by cc.c_id;";
            Statement sta = connection.createStatement();
            ResultSet rs = sta.executeQuery(cquery); 
            DefaultListModel customer = new DefaultListModel();
            while (rs.next()) {
                customer.addElement(rs.getString("c_id") + " - " + rs.getString("c_name"));
            }
            clist.setModel(customer);
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(breturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(breturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(breturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(breturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new breturn().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backbutton;
    private javax.swing.JButton bcanc;
    private javax.swing.JList<String> blist;
    private javax.swing.JButton bsele;
    private javax.swing.JTextField cdate;
    private javax.swing.JList<String> clist;
    private javax.swing.JButton creturn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField rdate;
    private javax.swing.JButton refresh;
    private javax.swing.JList<String> rlist;
    // End of variables declaration//GEN-END:variables
}
