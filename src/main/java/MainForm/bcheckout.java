package MainForm;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Rayleigh Thai
 */
public class bcheckout extends javax.swing.JFrame {

    int e_id = 2;
    // find Employee Library location
    int ll = ell();
//    getdate();
    
    public void getdate() {
        Calendar cal = new GregorianCalendar();
        int year = cal.get(Calendar.YEAR);
        int month = cal.get(Calendar.MONTH);
        int day = cal.get(Calendar.DAY_OF_MONTH);
        
        String today = year + "-" + month + "-" + day;
        System.out.println(today);
        tdate.setText(today);
    }
    
    int ell(){
        int ll = 0;
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String cquery = "select * from employee where e_id = " + e_id;
            Statement sta = connection.createStatement();
            ResultSet rs = sta.executeQuery(cquery); 
            while (rs.next())
            {
                ll = Integer.parseInt(rs.getString("l_id"));
            }
            //JOptionPane.showMessageDialog(this, "Book(s) returned to library");
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return ll;
    }
    
    public bcheckout() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backbutton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        clist = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        blist = new javax.swing.JList<>();
        refresh = new javax.swing.JButton();
        rdate = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        rlist = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        bsele = new javax.swing.JButton();
        bcanc = new javax.swing.JButton();
        creturn = new javax.swing.JButton();
        tdate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 600));

        backbutton.setText("Back");
        backbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbuttonActionPerformed(evt);
            }
        });

        jLabel3.setText("Today Date");

        clist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                clistValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(clist);

        jLabel4.setText("Return after ");

        blist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                blistValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(blist);

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        jLabel2.setText("Search by Book");

        jScrollPane2.setViewportView(rlist);

        jLabel1.setText("Search by Customer");

        bsele.setText("Select");
        bsele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bseleActionPerformed(evt);
            }
        });

        bcanc.setText("Remove Selection");
        bcanc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcancActionPerformed(evt);
            }
        });

        creturn.setText("Confirm Return");
        creturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creturnActionPerformed(evt);
            }
        });

        tdate.setEditable(false);

        jLabel5.setText("days");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backbutton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bcanc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rdate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(creturn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tdate, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bsele, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(refresh))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refresh)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bsele)
                    .addComponent(jLabel3)
                    .addComponent(tdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backbutton)
                    .addComponent(creturn)
                    .addComponent(jLabel4)
                    .addComponent(rdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(bcanc))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbuttonActionPerformed
        fclose();
        guiemployee back = new guiemployee();
        back.setVisible(true);
    }//GEN-LAST:event_backbuttonActionPerformed

    private void clistValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_clistValueChanged
        // when a customer selected, book list will fiter to only said customer.
        int index = clist.getSelectedIndex();
        System.out.println("Index Selected: " + index);
        if (index >= 0)
        {
            String s = (String) clist.getSelectedValue();
            String[] str = s.split(" - ");
            String id = str[0].trim();
            getbook(id);
        }
    }//GEN-LAST:event_clistValueChanged

    private void blistValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_blistValueChanged
        // when a book selected ? can we do multiple
        int index = blist.getSelectedIndex();
        System.out.println("Index Selected: " + index);
        if (index >= 0)
        {
            String s = (String) blist.getSelectedValue();
            String[] str = s.split(" - ");
            String id = str[0].trim();
            getcustomer(id);
        }
    }//GEN-LAST:event_blistValueChanged

    public void getbook(String id){
        // connect to server, get books with associated id. 
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String bquery = "Select * from cart as cc left join book as b on b.b_id = cc.b_id where c_id = " + id + " order by b.b_name;";
            System.out.println(bquery);
            Statement sta = connection.createStatement();
            ResultSet bs = sta.executeQuery(bquery);
            //Update book list
            DefaultListModel book = new DefaultListModel();
            while (bs.next())
            {
                book.addElement(bs.getString("b_id") + " - " + bs.getString("b_name"));
            }
            blist.setModel(book);
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    
    public void getcustomer(String id) {
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String cquery = "select * from checkout as cc left join customer as c on c.c_id = cc.c_id where b_id = \"" + id + "\" order by c.c_id;";
            Statement sta = connection.createStatement();
            ResultSet rs = sta.executeQuery(cquery); 
            DefaultListModel customer = new DefaultListModel();
            while (rs.next()) {
                customer.addElement(rs.getString("c_id") + " - " + rs.getString("c_name"));
                tdate.setText(rs.getString("checkout_date"));
                rdate.setText(rs.getString("return_date"));
            }
            clist.setModel(customer);
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }   
    
    public void bookadd(String strr)
    {
        bre.addElement(strr);
        rlist.setModel(bre);
    }
    
    public static String tostm(String id, String n) {
        String s = "";
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String bquery = "Select * from customer as c join cart as cc on c.c_id = cc.c_id left join book as b on b.b_id = cc.b_id where cc.b_id = \"" + id + "\" and b.b_name = \"" + n+ "\" order by b.b_name;";
            System.out.println(bquery);
            Statement sta = connection.createStatement();
            ResultSet bs = sta.executeQuery(bquery);
            while (bs.next()) {
                s = bs.getString("c_name") + " wants to checkout " + bs.getString("b_id") + " - " + bs.getString("b_name");
            }
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
      return s;
    }
    DefaultListModel bre = new DefaultListModel();
    
    
    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        refresh();
    }//GEN-LAST:event_refreshActionPerformed

    private void bseleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bseleActionPerformed
        // When book is selected
        //int index = blist.getSelectedIndex();
        String s = (String) blist.getSelectedValue();
        String[] str = s.split(" - ");
        String isbn = str[0].trim();
        String name = str[1].trim();
        String stm = tostm(isbn, name);
        int i = bre.getSize();
        while (i > 0) {
            if (stm.equals(bre.getElementAt(i-1).toString()))
            {
                bre.removeElementAt(i-1);
                System.out.println("Not Removing");
                JOptionPane.showMessageDialog(this, "This Book already in the List!");
            }
            i--;
        }
        bookadd(stm);
    }//GEN-LAST:event_bseleActionPerformed

    private void bcancActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcancActionPerformed
        int index = rlist.getSelectedIndex();
        System.out.println("Index Selected: " + index);
        DefaultListModel rm = (DefaultListModel) rlist.getModel();
        if (index >= 0) {
            rm.removeElementAt(index);
            rlist.setModel(rm);
            JOptionPane.showMessageDialog(this, "Selection was removed!");
        }
        else {
            JOptionPane.showMessageDialog(this, "No Selection was selected!");
        }
    }//GEN-LAST:event_bcancActionPerformed

    String getreturndate(int days) {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.DATE, days);
        int year = c.get(Calendar.YEAR);
        int month = c.get(Calendar.MONTH);
        int day = c.get(Calendar.DAY_OF_MONTH);
        String today = year + "-" + month + "-" + day;
        return today;        
    }
    
    void updatebookstatus(String isbn, String book) {
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String cquery = "Update `book_status` Set "
                    + "b_availability = 0, l_id = " + ll  
                    + " where b_id = \"" + isbn + "\"";
            System.out.println(cquery);
            Statement sta = connection.createStatement();
            sta.executeUpdate(cquery); 
            //JOptionPane.showMessageDialog(this, "Book(s) returned to library");
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    void removefcart(String isbn, String book) {
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String cquery = "Delete from `cart` where "
                    + "b_id = \"" + isbn + "\" and "  
                    + "b_name = \"" + book + "\"";
            System.out.println(cquery);
            Statement sta = connection.createStatement();
            sta.executeUpdate(cquery); 
            //JOptionPane.showMessageDialog(this, "Book(s) returned to library");
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    
    private void creturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creturnActionPerformed
        int returnday = -1;
        try {
            returnday = Integer.parseInt(rdate.getText());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please enter numerical value for return days");
        }
        System.out.println(returnday);
        if (returnday >= 0) {
            DefaultListModel returning = (DefaultListModel) rlist.getModel();
            // Create an insert into checkout
            String stm = "insert into `checkout` (c_id, b_id, b_name, e_id, checkout_date, return_date) values ";
            String line = "";
            String returndate = getreturndate(returnday);
            int i = returning.getSize();
            while (i > 0)
            {
                String index = returning.getElementAt(i-1).toString();
                String[] s = index.split(" wants to checkout ");
                String name = s[0].trim();
                String[] ss = s[1].split(" - ");
                String isbn = ss[0].trim();
                String bn = ss[1].trim();
                int id = getid(name);
                returning.removeElementAt(i-1);
                removefcart(isbn, bn);  //Delete statement from cart
                updatebookstatus(isbn, bn); // change availability to 0 as it's checkout.
                line = line + ("(\"" + id + "\", \"" + isbn + "\", \"" + bn + "\", \"" + e_id + "\", \"" + tdate.getText().toString() + "\", \"" + returndate + "\")");
                if (i>1){
                    line = line + ", ";
                }
                i--;
            }
            stm = stm + line + ";";
            System.out.println(stm);
            checkout(stm);
            rlist.setModel(returning);
               
        }
        else {
            JOptionPane.showMessageDialog(this, "Please enter day!");
        }
    }//GEN-LAST:event_creturnActionPerformed
    
    int getid(String name){
        int id = 0;
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String cquery = "select * from cart as cc left join customer as c on c.c_id = cc.c_id where c_name = \"" + name + "\"";
            Statement sta = connection.createStatement();
            ResultSet rs = sta.executeQuery(cquery); 
            while (rs.next())
            {
                id = Integer.parseInt(rs.getString("c_id"));
            }            
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        //System.out.println(id);
        return id;
    }
    
    void checkout(String s) // Need to change to checkout()
    {
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            Statement sta = connection.createStatement();
            System.out.println(s);
            sta.executeUpdate(s); 
            JOptionPane.showMessageDialog(this, "Books are checkout!");
            connection.close();
            refresh();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    
    public void refresh(){
      try {
            crefresh();
            brefresh();
            getdate();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    public void brefresh() {
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String bquery = "Select * from cart as cc left join book as b on b.b_id = cc.b_id order by b.b_name;";
            Statement sta = connection.createStatement();
            ResultSet bs = sta.executeQuery(bquery);
            DefaultListModel book = new DefaultListModel();
            while (bs.next()) {
                book.addElement(bs.getString("b_id") + " - " + bs.getString("b_name"));
            }
            blist.setModel(book);
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    
    public void crefresh() {
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/number_1", "root","");
            String cquery = "select distinct cc.c_id, c_name  from cart as cc left join customer as c on c.c_id = cc.c_id order by c_id;";
            Statement sta = connection.createStatement();
            ResultSet rs = sta.executeQuery(cquery); 
            DefaultListModel customer = new DefaultListModel();
            while (rs.next()) {
                customer.addElement(rs.getString("c_id") + " - " + rs.getString("c_name"));
            }
            clist.setModel(customer);
            connection.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    
    public void fclose(){
        WindowEvent closeWindow = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(bcheckout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(bcheckout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(bcheckout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(bcheckout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new bcheckout().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backbutton;
    private javax.swing.JButton bcanc;
    private javax.swing.JList<String> blist;
    private javax.swing.JButton bsele;
    private javax.swing.JList<String> clist;
    private javax.swing.JButton creturn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField rdate;
    private javax.swing.JButton refresh;
    private javax.swing.JList<String> rlist;
    private javax.swing.JTextField tdate;
    // End of variables declaration//GEN-END:variables
}
